unsigned int i - unsigned int j
cmp_env_name - christyenv_nm
ptr_env - rv
buffer - b
_environ - env
evaluation - evl
curr - c
next - nxt
new - nw
temp - tp
struct data - struct prosey
data - prossey
av - ar
input - log
args - args
status - status
counter - count
pid - pid
lenght - lenght
data_shell - pro
sep_list_s - sls
separator - sep
next - nxt
sep_list_s - sls 
sep_list - sl
sep_list_s *next - sls *nxt
line_list_s - lls
line - l
line_list- ln
line_list_s *next - lls *nxt
val - val
r_var_list - rvl
r_var - rv
len_var - lvr
len_val - lvl
builtin_s - buil
name - nm
f - f
datash - d
builtin_t - built
builtin - b

/* aux_lists.c */
sep_list *add_sep_node_end(sep_list **head, char sep);
      sl *asne(sl **h, char sep);

void free_sep_list(sep_list **head);
      void fsl(sl **h);

line_list *add_line_node_end(line_list **head, char *line);
      ln *alne(ln **h, char *l);

void free_line_list(line_list **head);
       void fll(ln **h);

/* aux_lists2.c */
r_var *add_rvar_node(r_var **head, int lvar, char *val, int lval);
      rv *arvn(rv **h, int lvr, char *val, int lvl);

void free_rvar_list(r_var **head);
      void frl(rv **h);


/* aux_str functions */
char *_strcat(char *dest, const char *src);
      char *christycat(char *d, const char *s);

char *_strcpy(char *dest, char *src);
      char *christycpy(char *d, char *s);

int _strcmp(char *s1, char *s2);
      int christycmp(char *s1, char *s2);

char *_strchr(char *s, char c);
      char *christychr(char *s, char c);

int _strspn(char *s, char *accept);
      int christyspn(char *s, char *a);


/* aux_mem.c */
void _memcpy(void *newptr, const void *ptr, unsigned int size);
       void shellcpy(void *n, const void *p, unsigned int s);

void *_realloc(void *ptr, unsigned int old_size, unsigned int new_size);
       void *shelloc(void *p, unsigned int os, unsigned int ns);

char **_reallocdp(char **ptr, unsigned int old_size, unsigned int new_size);
      char **shellocdp(char **p, unsigned int os, unsigned int ns);


/* aux_str2.c */
char *_strdup(const char *s);
     char *christydup(const char *s);

int _strlen(const char *s);
     int christylen(const char *s);

int cmp_chars(char str[], const char *delim);
     int chirstychars(char s[], const char *d);

char *_strtok(char str[], const char *delim);
      char *christytok(char s[], const char *d);

int _isdigit(const char *s); 
       int christigit(const char *s);


/* aux_str3.c */
void rev_string(char *s);
     void christystring(char *d);


/* check_syntax_error.c */
int repeated_char(char *input, int i);
    int rchar(char *log, int i);

int error_sep_op(char *input, int i, char last);
     int eso(char *log, int i, char l);

int first_char(char *input, int *i);
     int fch(char *log, int *i);

void print_syntax_error(data_shell *datash, char *input, int i, int bool);
     void pse(pro *d, char *log, int i, int bl);

int check_syntax_error(data_shell *datash, char *input);
     int cse(pro *d, char *log);


/* shell_loop.c */
char *without_comment(char *in);
     char *wc(char *in);

void shell_loop(data_shell *datash);
      void slll(pro *d);


/* read_line.c */
char *read_line(int *i_eof);
      char *rline(int *f);


/* split.c */
char *swap_char(char *input, int bool);
      char *spchar(char *log, int bl);

void add_nodes(sep_list **head_s, line_list **head_l, char *input);
     void an(sl **h1, ln **h2, char *log);

void go_next(sep_list **list_s, line_list **list_l, data_shell *datash);
     void gnxt(sl **ls, ln **ll, pro *d);

int split_commands(data_shell *datash, char *input);
     int sc(pro *d, char *log);

char **split_line(char *input);
      char **sp(char *log);


/* rep_var.c */
void check_env(r_var **h, char *in, data_shell *data);
      void cenv(rv **h, char *in, pro *d);

int check_vars(r_var **h, char *in, char *st, data_shell *data);
       int cvars(rv **h, char *in, char *st, pro *d);

char *replaced_input(r_var **head, char *input, char *new_input, int nlen);
      char *rlogg(r_var **h, char *log, char *nt, int nn);

char *rep_var(char *input, data_shell *datash);
    char *rva(char *log, pro *d);


/* get_line.c */
void bring_line(char **lineptr, size_t *n, char *buffer, size_t j);
      void bl(char **lr, size_t *n, char *b, size_t j);

ssize_t get_line(char **lineptr, size_t *n, FILE *stream);
      ssize_t gline(char **lptr, size_t *n, FILE *sm);


/* exec_line */
int exec_line(data_shell *datash);
   int eline(pro *d);


/* cmd_exec.c */
int is_cdir(char *path, int *i);
     int idir(char *ph, int *i);

char *_which(char *cmd, char **_environ);
      char *wh(char *cd, char **env)

int is_executable(data_shell *datash);
      int iexec(pro *dsh);

int check_error_cmd(char *dir, data_shell *datash);
      int cecmd(char *dr, pro *d);

int cmd_exec(data_shell *datash);
      int cexec(pro *d);


/* env1.c */
char *_getenv(const char *name, char **_environ);
      char *gv(const char *nm, char **env);

int _env(data_shell *datash);
       int envi(pro *d);


/* env2.c */
char *copy_info(char *name, char *value);
     char *cinfo(char *n, char *val);

void set_env(char *name, char *value, data_shell *datash);
      void senv(char *n, char *val, pro *d);

int _setenv(data_shell *datash);
       int stenv(pro *d);

int _unsetenv(data_shell *datash);
       int setenvv(pro *d);


/* cd.c */
void cd_dot(data_shell *datash);
     void cddt(pro *d);

void cd_to(data_shell *datash);
      void cdto(pro *d);

void cd_previous(data_shell *datash);
      void cdps(pro *d);

void cd_to_home(data_shell *datash);
      void cdth(pro *d);


/* cd_shell.c */
int cd_shell(data_shell *datash);
     int cds(pro *d);


/* get_builtin */
int (*get_builtin(char *cmd))(data_shell *datash);
      int (*gbuilt(char *c))(pro *d);


/* _exit.c */
int exit_shell(data_shell *datash);
    int eshell(pro *d);


/* aux_stdlib.c */
int get_len(int n);
     int gleen(int n);

char *aux_itoa(int n);
      char *aitoa(int n);

int _atoi(char *s);
      int atoii(char *s);


/* aux_error1.c */
char *strcat_cd(data_shell *, char *, char *, char *);
      char *sscd(pro *, char *, char *, char *);

char *error_get_cd(data_shell *datash);
      char *egd(pro *d);

char *error_not_found(data_shell *datash);
       char *enf(pro *d);

char *error_exit_shell(data_shell *datash);
      char *eesh(pro *d);


/* aux_error2.c */
char *error_get_alias(char **args);
    char *egalias(char **args);

char *error_env(data_shell *datash);
      char *eenv(pro *d);

char *error_syntax(char **args);
      char *eyntax(char **args);

char *error_permission(char **args);
     char *eperm(char **args);

char *error_path_126(data_shell *datash);
      char *ep126(pro *d);



/* get_error.c */
int get_error(data_shell *datash, int eval);
     int gerror(pro *d, int ev);



/* get_sigint.c */
void get_sigint(int sig);
   void gsigint(int sig);



/* aux_help.c */
void aux_help_env(void);
     void myhp_env(void);

void aux_help_setenv(void);
      void myhp_setenv(void);

void aux_help_unsetenv(void);
      void myhp_unsetenv(void);

void aux_help_general(void);
     void myhp_gen(void);

void aux_help_exit(void);
     void myhp_exit(void);



/* aux_help2.c */
void aux_help(void);
     void myhp(void);

void aux_help_alias(void);
     void myhp_sis(void);

void aux_help_cd(void);
     void myhp_cd(void);



/* get_help.c */
int get_help(data_shell *datash);
      int ghelp(pro *d);

#endif
